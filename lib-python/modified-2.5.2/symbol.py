#! /usr/bin/env python

"""Non-terminal symbols of Python grammar (from "graminit.h")."""

#  This file is automatically generated; please don't muck it up!
#
#  To update the symbols in this file, 'cd' to the top directory of
#  the python source tree after building the interpreter and run:
#
#    python Lib/symbol.py

#--start constants--
dotted_as_names = 276
import_as_name = 297
try_stmt = 332
eval_input = 279
small_stmt = 320
augassign = 264
argument = 260
or_test = 310
fplist = 290
import_as_names = 298
return_stmt = 316
testlist_safe = 330
not_test = 307
listmaker = 306
except_clause = 280
list_if = 304
old_test = 309
arglist = 259
import_from = 299
gen_iter = 294
break_stmt = 265
dictmaker = 274
comp_op = 267
import_stmt = 301
with_var = 336
parameters = 311
continue_stmt = 270
fpdef = 289
shift_expr = 317
dotted_as_name = 275
testlist_gexp = 329
list_iter = 305
exec_stmt = 281
factor = 285
list_for = 303
global_stmt = 295
subscript = 322
decorators = 272
compound_stmt = 269
and_expr = 257
yield_stmt = 339
dotted_name = 277
yield_expr = 338
power = 313
print_stmt = 314
gen_for = 292
subscriptlist = 323
testlist = 327
classdef = 266
and_test = 258
encoding_decl = 278
assert_stmt = 262
test = 326
for_stmt = 288
stmt = 321
lambdef = 302
atom = 263
funcdef = 291
expr_stmt = 283
old_lambdef = 308
exprlist = 284
decorator = 271
pass_stmt = 312
sliceop = 319
comparison = 268
term = 325
if_stmt = 296
arith_expr = 261
expr = 282
raise_stmt = 315
import_name = 300
gen_if = 293
del_stmt = 273
while_stmt = 334
varargslist = 333
testlist1 = 328
suite = 324
single_input = 256
simple_stmt = 318
with_stmt = 335
xor_expr = 337
flow_stmt = 287
trailer = 331
file_input = 286
#--end constants--

sym_name = {}
for _name, _value in globals().items():
    if type(_value) is type(0):
        sym_name[_value] = _name


if __name__ == "__main__":
    import os
    import sys
    import token
    sys.path.append(os.path.join(os.path.dirname(sys.argv[0]), "../../"))
    try:
        from pypy.interpreter.pyparser import pygram
        token.main(pygram.python_grammar.symbol_ids, __file__)
    finally:
        sys.path.pop()
