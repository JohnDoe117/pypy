 - Complete the PyTypeObject initialization code. (see XXX in the code)
  - Fill the PyTypeObject slots with method callers.
  - Copy the slots from the base.
  - Both tasks are necessary to be able to call slots from C code correctly.

 - Implement subclassing of types defined in C.

 - Use a WeakKeyDictionary to count how often a PyObject is allocated for
   a given wrapped object and use this to assess whether optimizations are
   useful

 - lltype.free in PyObject_Del() sometimes raise an exception (but all
   tests pass). FIXED?
   - Reported by Amaury
   - Alexander cannot reproduce it

 - replace @cpython_api(external=False) by another explicit name: all
   it does is a lltype function pointer, no C code involved.

 - Implement Members.

 - Fix distutil's build_ext to work with cpyext.

 - Extend the import machinery to load .so/.pyd files.

 - refactor management of py_objects_r2w and py_objects_w2r, this can
   probably be expressed in terms of _PyObject_GC_TRACK macros.

 - Use the standard CPython attribute names: ob_type, ob_refcnt.

 - ob_type should be a PyTypeObject.
